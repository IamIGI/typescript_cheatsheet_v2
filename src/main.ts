//Arrays
let stringArr = ['one', 'hey', 'Igor'];

let guitars = ['Strat', 'Les Paul', 5150];

let mixedData = ['EVH', 1984, true];

stringArr[0] = 'John';
stringArr.push('hey');

guitars[0] = 1984;
guitars.unshift('Jim');

guitars = stringArr;

let test = [];
let bands: string[] = [];
bands.push('Van Alhen');

//Tuples
let myTuple: [string, number, boolean] = ['Igor', 3, true];

let mixed = ['John', 1, false];

myTuple[1] = 42;

//Objects
let myObj: object;
myObj = [];
console.log(typeof myObj);
myObj = bands;
myObj = {};

const exampleObj = {
    prop1: 'Dave',
    prop2: true,
};

exampleObj.prop1 = 'John';

//custome types
// type Guitarist = {
//     name: string;
//     active?: boolean; //optional
//     albums: (string | number)[];
// };

interface Guitarist {
    //the same as type, use interface when you define class
    name?: string; //optional - ?
    active: boolean;
    albums: (string | number)[];
}

let evh: Guitarist = {
    name: 'Eddie',
    active: false,
    albums: [1984, 5150, '2009'],
};

let jp: Guitarist = {
    name: 'Jimmie',
    active: false,
    albums: ['I', 'II', 'IV'],
};

// evh = jp;

const greetGuitarist = (guitarist: Guitarist) => {
    return `Hello ${guitarist.name?.toUpperCase()}!`; //name could no exits, cuz it is optional so you also have to use ? mark there
};

console.log(greetGuitarist(jp));

//Enums - generated by typescript, cuz js do not have it

enum Grade {
    U = 1,
    D,
    C,
    B,
    A,
}

console.log(Grade.U);
